var documenterSearchIndex = {"docs":
[{"location":"references/#links","page":"References","title":"links","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"wavefront (moving and tumbling windows)","category":"page"},{"location":"references/","page":"References","title":"References","text":"ksqldb (windowed aggregation)","category":"page"},{"location":"references/","page":"References","title":"References","text":"survey of window types","category":"page"},{"location":"references/","page":"References","title":"References","text":"in-order sliding-window aggregation","category":"page"},{"location":"references/","page":"References","title":"References","text":"efficient incremental computation of aggregations","category":"page"},{"location":"references/","page":"References","title":"References","text":"tutorial: sliding-window aggregation algorithms","category":"page"},{"location":"references/#citations","page":"References","title":"citations","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"[VGT2023] \nauthors Verwiebe, J., Grulich, P.M., Traub, J. et al.\ntitle Survey of window types for aggregation in stream processing systems\njournal The VLDB Journal (2023)\ndoi 10.1007/s00778-022-00778-6\npaper pdf","category":"page"},{"location":"references/","page":"References","title":"References","text":"[THS2021] \nauthors Tangwongsan, K., Hirzel, M. & Schneider, S.\ntitle In-order sliding-window aggregation in worst-case constant time\njournal The VLDB Journal 30, 933–957 (2021)\ndoi 10.1007/s00778-021-00668-3\npaper pdf","category":"page"},{"location":"references/","page":"References","title":"References","text":"[ZAT2021] \nauthors Zhang. C., Akbarinia, R., Toumani, F.\ntitle Efficient Incremental Computation of Aggregations over Sliding Windows\nproceedings 27th ACM SIGKDD Conference, 2136-2144 (2021)\ndoi 10.1145/3447548.3467360\npaper pdf","category":"page"},{"location":"references/","page":"References","title":"References","text":"[TJG2021] \nauthors Traub, J., Grulich, P.M., Cuellar, A.R. et. al.\ntitle Scotty: General and Efficient Open-source Window Aggregation\njournal ACM Trans. Database Syst. 46, 1, (2021)\ndoi 10.1145/3433675\npaper pdf","category":"page"},{"location":"references/","page":"References","title":"References","text":"[HST2017] \nauthors Hirzel, M., Schneider, S., Tangwongsan, K.\ntitle Tutorial: Sliding-Window Aggregation Algorithms\nproceedings DEBS ’17, Barcelona, Spain (2017)\ndoi 10.1145/3093742.3095107\npaper pdf","category":"page"},{"location":"design/signatures/#**Positional-Signatures**","page":"-","title":"Positional Signatures","text":"","category":"section"},{"location":"design/signatures/#*each-approach-subsumes-64-signatures*","page":"-","title":"each approach subsumes 64 signatures","text":"","category":"section"},{"location":"design/signatures/","page":"-","title":"-","text":"With 2 keyword args, there are 4 positional signatures (one for each state shown in approach).\nWith the 4 data configurations that becomes 4x4 = 16 signatures.\nWith the 3 ways to weight + unweighted this gives 16x4 = 64 signatures.","category":"page"},{"location":"design/signatures/#*enfolding-dispatch*","page":"-","title":"enfolding dispatch","text":"","category":"section"},{"location":"design/signatures/","page":"-","title":"-","text":"unweighted","category":"page"},{"location":"design/signatures/","page":"-","title":"-","text":"function <approach>(windowed_fn, window_width, data_seq;\r\n                    padding=pad, atend=true)\r\n  if !atend # the common case\r\n    if padding === nopadding # the default case\r\n      <approach>(windowed_fn, window_width, data_seq)\r\n    else\r\n      <approach>(windowed_fn, window_width, data_seq, padding)\r\n    end\r\n  else\r\n    if padding === nopadding # the default case\r\n      <approach>(windowed_fn, window_width, data_seq, atend)\r\n    else\r\n      <approach>(windowed_fn, window_width, data_seq, padding, atend)\r\n    end\r\n  end\r\nend","category":"page"},{"location":"design/signatures/","page":"-","title":"-","text":"weighted","category":"page"},{"location":"design/signatures/","page":"-","title":"-","text":"function <approach>(windowed_fn, window_width, data_seq, weighting;\r\n                    padding=pad, atend=true)\r\n  if !atend # the common case\r\n    if padding === nopadding # the default case\r\n      <approach>(windowed_fn, window_width, data_seq, weighting)\r\n    else\r\n      <approach>(windowed_fn, window_width, data_seq, weighting, padding)\r\n    end\r\n  else\r\n    if padding === nopadding # the default case\r\n      <approach>(windowed_fn, window_width, data_seq, weighting, atend)\r\n    else\r\n      <approach>(windowed_fn, window_width, data_seq, weighting, padding, atend)\r\n    end\r\n  end\r\nend","category":"page"},{"location":"approach/rolling/","page":"rolling","title":"rolling","text":"rolling(rolling_fn, window_width, data_seq)\r\n\r\nrolling(fn, width, data; padding=nopadding)\r\nrolling(fn, width, data; padding, atend=false)","category":"page"},{"location":"approach/rolling/","page":"rolling","title":"rolling","text":"rolling a function over windowed data repeatedly applies that function to each overlapping data subsequence that the moving window provides.  The length of each subsequence is given by the width of the window.","category":"page"},{"location":"approach/rolling/","page":"rolling","title":"rolling","text":"The function is applied as if it gathers the data spanned and consumes it all at once.  The function is one that summarizes, condeneses, abstracts, characterizes, or explores  subsequences shown by the moving window.","category":"page"},{"location":"approach/rolling/","page":"rolling","title":"rolling","text":"While the window is fully contained within the data, each step (one roll) increments the indices of the current window: (start:finish)  ↦  (start+1:finish+1). When advancing the window would carry the end of the window beyond the end of the data, rolling is complete.","category":"page"},{"location":"approach/rolling/","page":"rolling","title":"rolling","text":"With N data values and a window of width W (W<=N), the result from rolling will have no more than N-(W-1) == N-W+1 values.  W-1 values are consumed in preparing to cover the first window.  The result may have fewer values, it depends on whether or not W divides N exactly.  To get a result of length N, use the keyword padding.","category":"page"},{"location":"approach/rolling/","page":"rolling","title":"rolling","text":"arguments","category":"page"},{"location":"approach/rolling/","page":"rolling","title":"rolling","text":"fn::Function:   summarizes, condenses windowed data\nwidth::Integer:   window breadth, counts covered elements.\ndata::Vector:     the data over which the window moves.","category":"page"},{"location":"approach/rolling/","page":"rolling","title":"rolling","text":"keywords","category":"page"},{"location":"approach/rolling/","page":"rolling","title":"rolling","text":"padding::Any=nopadding: the value place as filler.\natend::Bool=false:     where to place the padding.","category":"page"},{"location":"approach/rolling/","page":"rolling","title":"rolling","text":"See also: padding,            atend,           weighted,           datastreams","category":"page"},{"location":"design/stratified_internals/#rolling-functions-over-windowed-data","page":"-","title":"rolling functions over windowed data","text":"","category":"section"},{"location":"design/stratified_internals/","page":"-","title":"-","text":"basic rolling\ngiven a data sequence of N elements\nusing a data window that widths S indices\none obtains N - S + 1 result values","category":"page"},{"location":"design/stratified_internals/","page":"-","title":"-","text":"padded rolling\ngiven a data sequence of N elements\nusing a data window that widths S indices\none obtains  N - S + 1 result values\nand provides S - 1 elements that pad","category":"page"},{"location":"design/stratified_internals/#rolling-is-built-from-three-internal-functions","page":"-","title":"rolling is built from three internal functions","text":"","category":"section"},{"location":"design/stratified_internals/","page":"-","title":"-","text":"basic_rolling\nthe result has fewer elements than the data has","category":"page"},{"location":"design/stratified_internals/","page":"-","title":"-","text":"padfirst_rolling\nthe padding elements occupy the lowest indices of the result","category":"page"},{"location":"design/stratified_internals/","page":"-","title":"-","text":"padfinal_rolling\nthe padding elements occupy the highest indices of the result","category":"page"},{"location":"design/stratified_internals/#unweighted-rolling","page":"-","title":"unweighted rolling","text":"","category":"section"},{"location":"design/stratified_internals/","page":"-","title":"-","text":"function rolling(fn1, width, data; padding, atend)\r\n\r\n    if padding === nopadding\r\n       basic_rolling(fn1, width, data)\r\n    elseif !atend\r\n       padfirst_rolling(fn1, width, data, padding)\r\n    else\r\n       padfinal_rolling(fn1, width, data, padding)\r\n    end\r\n\r\nend","category":"page"},{"location":"design/stratified_internals/#weighted-rolling","page":"-","title":"weighted rolling","text":"","category":"section"},{"location":"design/stratified_internals/","page":"-","title":"-","text":"function rolling(fn1, width, data, weights; padding, atend)\r\n\r\n    if padding === nopadding\r\n       basic_rolling(fn1, width, data, weights)\r\n    elseif !atend\r\n       padfirst_rolling(fn1, width, data, weights, padding)\r\n    else\r\n       padfinal_rolling(fn1, width, data, weights, padding)\r\n    end\r\n\r\nend","category":"page"},{"location":"design/stratified_internals/#processing","page":"-","title":"processing","text":"","category":"section"},{"location":"design/stratified_internals/","page":"-","title":"-","text":"unweighted \nthe current window on the data is obtained current_data\nthe function is applied to the current_data rolling_value","category":"page"},{"location":"design/stratified_internals/","page":"-","title":"-","text":"with weights \nthe current window on the data is obtained current_data\nthe current_data is scaled by the weights weighted_data\nthe function is applied to the weighted_data rolling_value","category":"page"},{"location":"design/stratified_internals/#additional-coverage","page":"-","title":"additional coverage","text":"","category":"section"},{"location":"design/stratified_internals/","page":"-","title":"-","text":"There are similar implementations for functions of 2, 3 arguments.","category":"page"},{"location":"design/stratified_internals/","page":"-","title":"-","text":"function rolling(fn2, width, data1, data2; \r\n                padding, atend)\r\n\r\n    if padding === nopadding\r\n       basic_rolling(fn2, width, data1, data2)\r\n    elseif !atend\r\n       padfirst_rolling(fn2, width, data1, data2, padding)\r\n    else\r\n       padfinal_rolling(fn2, width, data1, data2, padding)\r\n    end\r\n\r\nend","category":"page"},{"location":"design/stratified_internals/","page":"-","title":"-","text":"function rolling(fn2, width, data1, data2, weights1, weights2;\r\n                 padding, atend)\r\n\r\n    if padding === nopadding\r\n       basic_rolling(fn2, width, data1, data2,\r\n                                weights1, weights2)\r\n    elseif !atend\r\n       padfirst_rolling(fn2, width, data1, data2, \r\n                                   weights1, weights2, padding)\r\n    else\r\n       padfinal_rolling(fn2, width, data1, data2,\r\n                                   weights1, weights2, padding)\r\n    end\r\n\r\nend","category":"page"},{"location":"design/stratified_internals/","page":"-","title":"-","text":"","category":"page"},{"location":"design/stratified_internals/","page":"-","title":"-","text":"","category":"page"},{"location":"design/stratified_internals/","page":"-","title":"-","text":"signatures returns\nfn1(x) scalar\nfn2(x,y) scalar\nfn3(x,y,z) scalar","category":"page"},{"location":"tech/windowmath/","page":"-","title":"-","text":"𝐷𝑎𝑡𝑎𝐷𝑎𝑡𝑎ₗₑₙ 𝑆𝑝𝑎𝑛 𝑆𝑝𝑎𝑛ₗₑₙ  𝒯 𝒯ₗₑₙ  𝒫 𝒫ₗₑₙ  𝒪 𝒪⁺ 𝒪⁻","category":"page"},{"location":"tech/windowmath/","page":"-","title":"-","text":"𝐷𝑎𝑡𝑎𝐷𝑎𝑡𝑎ₙ 𝑆𝑝𝑎𝑛 𝑆𝑝𝑎𝑛ₙ  𝒯 𝒯ₙ  𝒫 𝒫ₙ  𝒪 𝒪⁺ 𝒪⁻ ⁺𝒪ₙ ⁻𝒪ₙ","category":"page"},{"location":"tech/windowmath/","page":"-","title":"-","text":"We accept a data sequence𝐷𝑎𝑡𝑎𝒮 of type Vector{T} and of length𝐷𝑎𝑡𝑎𝒮ₙ (𝐷𝑎𝑡𝑎𝒮[begin:end], length(𝐷𝑎𝑡𝑎𝒮) ==𝐷𝑎𝑡𝑎𝒮ₙ). We are given a window specification that includes its length, the width of any tiling, and more.","category":"page"},{"location":"tech/windowmath/","page":"-","title":"-","text":"Given a data seqeunce of N elements and a window that widths W elements (W <= N),     ccompletewindows, rremainingindices = fldmod(N, W)     if iszero(remainingelements) the data sequence is covered exactly with ccompletewindows     otherwise, the data sequence is nearly fully covered with ccompletewindows, leaving rremaining_indices","category":"page"},{"location":"tech/windowmath/","page":"-","title":"-","text":"N = c_complete_windows * W + r_remaining_indices\n0 = c_complete_windows * W + r_remaining_indices - N\nc_complete_windows * W = N - r_remaining_indices\nc_complete_windows = div((N - r_remaining_indices), W)\nW = div((N - r_remaining_indices), c_complete_windows)\nr_remaining_indices = N - c_complete_windows * W","category":"page"},{"location":"tech/windowmath/","page":"-","title":"-","text":"The preceeding assumes that the window always advances by 1 index. Use A as the whole number of indices (1 <= A <= N-1-W) that window always advances. With A = N-1-W, there is exactly one advance, from index 1 to index 1+N-1-W = N-W    the repositioned window now starts at index N-W and widths W indices, N-W+W == N    and the window has nowhere more to traverse.","category":"page"},{"location":"tech/windowmath/","page":"-","title":"-","text":"What value of A allows exactly 2 advances?     A1 = N-1-W, if iseven(A1) A2 = div(A1,2)     or, if isodd(N-W), A2 = div(N-W-1, 2)","category":"page"},{"location":"approach/padding/","page":"padding","title":"padding","text":"   padding -- optional keyword argument","category":"page"},{"location":"approach/padding/","page":"padding","title":"padding","text":"By definition, applying a windowed function over data will result in fewer items than are in the original data. To add the missing items, select a padding value using the padding keyword argument e.g. padding=missing.","category":"page"},{"location":"approach/padding/","page":"padding","title":"padding","text":"By default, padding is applied at the begining of the result.","category":"page"},{"location":"approach/padding/","page":"padding","title":"padding","text":"by default, the padding value is placed at the lowest indices","category":"page"},{"location":"approach/padding/","page":"padding","title":"padding","text":"To apply padding at the end of the result, set atend=true.","category":"page"},{"location":"approach/padding/","page":"padding","title":"padding","text":"that way the padding value is placed at the highest indices","category":"page"},{"location":"approach/padding/","page":"padding","title":"padding","text":"See also: atend,           rolling,           tiling,           running","category":"page"},{"location":"approach/weighted/","page":"weighting","title":"weighting","text":"    apply functions over windows into weighted data\r\n\r\n`rolling`, `tiling`, and `running` all provide data weighting.\r\n\r\nThe functions for weighted data follow the unweighted function signatures.\r\n- the weighting is given after the data, as the last positional arg\r\n\r\nWeighting for a data vector is given as one of the subtypes of StatsBase.AbstractWeights","category":"page"},{"location":"approach/weighted/","page":"weighting","title":"weighting","text":"To use myweights::Vector{<:Real} as weights","category":"page"},{"location":"approach/weighted/","page":"weighting","title":"weighting","text":"When a window is provided weights, is important to normalize those weights. For most applications, the weights should sum to 1.0 (or just less than 1.0).","category":"page"},{"location":"approach/weighted/","page":"weighting","title":"weighting","text":"The function safeweights(weights::AbstractVector{<:AbstractFloat}) does the this with care. The sum of a weight vector returned from  safeweights is assured to be <= 1.0 while staying within a small multiple ofeps(eltype(weights)).","category":"page"},{"location":"approach/weighted/","page":"weighting","title":"weighting","text":"scale the values so they sum to 1.0 (or a few eps less than 1.0)\nmyweights1 = safeweights(myweights1)\nconvert the values to StatsBase.AnalyticWeights (usually)\nweighting = AnalyticWeights(myweights1)","category":"page"},{"location":"approach/weighted/","page":"weighting","title":"weighting","text":"","category":"page"},{"location":"approach/weighted/","page":"weighting","title":"weighting","text":"See also: safeweights,           datastreams","category":"page"},{"location":"use/rolling/","page":"rolling","title":"rolling","text":"You have a data sequence 𝐷𝑎𝑡𝑎, the Vector[1, 2, 3, 4, 5].\nThe window width 𝑆𝑝𝑎𝑛 of each subsequence is 3.\nThe function 𝐹𝑢𝑛𝑐 to be applied over subsequences of 𝐷𝑎𝑡𝑎 is sum.","category":"page"},{"location":"use/rolling/","page":"rolling","title":"rolling","text":"using RollingFunctions\r\n\r\n𝐷𝑎𝑡𝑎 = [1, 2, 3, 4, 5]\r\n𝐹𝑢𝑛𝑐 = sum\r\n𝑆𝑝𝑎𝑛 = 3\r\n\r\nrolled = rolling(𝐹𝑢𝑛𝑐,𝐷𝑎𝑡𝑎, 𝑆𝑝𝑎𝑛)\r\n\r\n\r\njulia> rolled\r\n3-element Vector{Int64}:\r\n  6\r\n  9\r\n 12\r\n\r\n#=\r\nThe first  windowed value is the 𝐹𝑢𝑛𝑐 (sum) of the first  𝑆𝑝𝑎𝑛 (3) values in 𝐷𝑎𝑡𝑎.\r\nThe second windowed value is the 𝐹𝑢𝑛𝑐 (sum) of the second 𝑆𝑝𝑎𝑛 (3) values in 𝐷𝑎𝑡𝑎.\r\nThe third  windowed value is the 𝐹𝑢𝑛𝑐 (sum) of the third  𝑆𝑝𝑎𝑛 (3) values in 𝐷𝑎𝑡𝑎.\r\n\r\nThere can be no fourth value as the third value used the fins entries in𝐷𝑎𝑡𝑎.\r\n=#\r\n\r\njulia> sum(𝐷𝑎𝑡𝑎[1:3]), sum(𝐷𝑎𝑡𝑎[2:4]), sum(𝐷𝑎𝑡𝑎[3:5])\r\n(6, 9, 12)\r\n\r\n\r\nIf the width of each subsequence increases to 4..\r\n\r\n𝑆𝑝𝑎𝑛 = 4\r\nrolled = rolling(𝐷𝑎𝑡𝑎, 𝑆𝑝𝑎𝑛, 𝒮);\r\n\r\nrolled\r\n2-element Vector{Int64}:\r\n 10\r\n 14","category":"page"},{"location":"use/rolling/","page":"rolling","title":"rolling","text":"Generally, with data that has r rows using a width of s results in r - s + 1 rows of values.","category":"page"},{"location":"use/rolling/#with-matricies","page":"rolling","title":"with matricies","text":"","category":"section"},{"location":"use/rolling/","page":"rolling","title":"rolling","text":"#=\r\n\r\nYou have n data vectors of equal length (rowcount 𝓇)\r\n𝐷𝑎𝑡𝑎₁ .. 𝐷𝑎𝑡𝑎ᵢ .. 𝐷𝑎𝑡𝑎ₙ  collected as an 𝓇 x 𝓃 matrix 𝑀\r\nyou want to apply the same function (sum) \r\nto colum-wise triple row subsequences, successively\r\n\r\n=#\r\n\r\nusing RollingFunctions\r\n\r\n𝐷𝑎𝑡𝑎₁ = [1, 2, 3, 4, 5]\r\n𝐷𝑎𝑡𝑎₂ = [5, 4, 3, 2, 1]\r\n𝐷𝑎𝑡𝑎₃ = [1, 2, 3, 2, 1]\r\n\r\n𝑀 = hcat(𝐷𝑎𝑡𝑎₁, 𝐷𝑎𝑡𝑎₂, 𝐷𝑎𝑡𝑎₃);\r\n\r\n#=\r\njulia> 𝑀\r\n5×3 Matrix{Int64}:\r\n 1  5  1\r\n 2  4  2\r\n 3  3  3\r\n 4  2  2\r\n 5  1  1\r\n=#\r\n\r\n𝐹𝑢𝑛𝑐 = sum\r\n𝑆𝑝𝑎𝑛 = 3\r\n\r\nresult = rolling(𝐹𝑢𝑛𝑐, 𝑀, 𝑆𝑝𝑎𝑛)\r\n\r\n#=\r\njulia> result\r\n3×3 Matrix{Int64}:\r\n  6  12  6\r\n  9   9  7\r\n 12   6  6\r\n=#\r\n","category":"page"},{"location":"use/rolling/#multicolumn-functions","page":"rolling","title":"multicolumn functions","text":"","category":"section"},{"location":"use/rolling/","page":"rolling","title":"rolling","text":"#=\r\n\r\nYou have n data vectors of equal length (rowcount 𝓇)\r\n𝐷𝑎𝑡𝑎₁ .. 𝐷𝑎𝑡𝑎ᵢ .. 𝐷𝑎𝑡𝑎ₙ\r\nyou apply a function (StatsBase.cor) of n==2 arguments\r\nto subsequences of width 3 (over successive triple rows)\r\n\r\n=#\r\n\r\nusing RollingFunctions\r\n\r\n𝐷𝑎𝑡𝑎₁ = [1, 2, 3, 4, 5]\r\n𝐷𝑎𝑡𝑎₂ = [5, 4, 3, 2, 1]\r\n\r\n𝐹𝑢𝑛𝑐 = cor\r\n𝑆𝑝𝑎𝑛 = 3\r\n\r\nresult = rolling(𝐹𝑢𝑛𝑐,𝐷𝑎𝑡𝑎₁,𝐷𝑎𝑡𝑎₂, 𝑆𝑝𝑎𝑛)\r\n#=\r\n3-element Vector{Float64}:\r\n  -1.0\r\n  -1.0\r\n  -1.0\r\n=#\r\n","category":"page"},{"location":"use/running/","page":"running","title":"running","text":"You have a data sequence 𝐷𝑎𝑡𝑎, the Vector[1, 2, 3, 4, 5].\nThe window width 𝑆𝑝𝑎𝑛 of each subsequence is 3.\nThe function 𝐹𝑢𝑛𝑐 to be applied over subsequences of 𝐷𝑎𝑡𝑎 is sum.","category":"page"},{"location":"use/running/","page":"running","title":"running","text":"using RollingFunctions\r\n\r\n𝐷𝑎𝑡𝑎 = [1, 2, 3, 4, 5]\r\n𝐹𝑢𝑛𝑐 = sum\r\n𝑆𝑝𝑎𝑛 = 3\r\n\r\nresult = running(𝐹𝑢𝑛𝑐,𝐷𝑎𝑡𝑎, 𝑆𝑝𝑎𝑛)\r\njulia> result\r\n3-element Vector{Int64}:\r\n  6\r\n  9\r\n 12\r\n\r\n#=\r\nThe first  windowed value is the 𝐹𝑢𝑛𝑐 (sum) of the first  𝑆𝑝𝑎𝑛 (3) values in 𝐷𝑎𝑡𝑎.\r\nThe second windowed value is the 𝐹𝑢𝑛𝑐 (sum) of the second 𝑆𝑝𝑎𝑛 (3) values in 𝐷𝑎𝑡𝑎.\r\nThe third  windowed value is the 𝐹𝑢𝑛𝑐 (sum) of the third  𝑆𝑝𝑎𝑛 (3) values in 𝐷𝑎𝑡𝑎.\r\n\r\nThere can be no fourth value as the third value used the fins entries in𝐷𝑎𝑡𝑎.\r\n=#\r\n\r\njulia> sum(𝐷𝑎𝑡𝑎[1:3]), sum(𝐷𝑎𝑡𝑎[2:4]), sum(𝐷𝑎𝑡𝑎[3:5])\r\n(6, 9, 12)\r\n\r\nIf the width of each subsequence increases to 4..\r\n𝑆𝑝𝑎𝑛 = 4\r\nresult = running(𝐹𝑢𝑛𝑐,𝐷𝑎𝑡𝑎, 𝑆𝑝𝑎𝑛);\r\n\r\nresult\r\n2-element Vector{Int64}:\r\n 10\r\n 14","category":"page"},{"location":"approach/atend/","page":"atend","title":"atend","text":"    atend -- optional keyword argument","category":"page"},{"location":"approach/atend/","page":"atend","title":"atend","text":"atend is a keyword argument that defaults to false.","category":"page"},{"location":"approach/atend/","page":"atend","title":"atend","text":"additional value[s] are placed at the start of the results.","category":"page"},{"location":"approach/atend/","page":"atend","title":"atend","text":"using atend = true","category":"page"},{"location":"approach/atend/","page":"atend","title":"atend","text":"additional value[s] are placed at the end (highest indices).","category":"page"},{"location":"approach/atend/","page":"atend","title":"atend","text":"By default, padding is applied at the begining of the result.","category":"page"},{"location":"approach/atend/","page":"atend","title":"atend","text":"the padding value is placed at the lowest indices","category":"page"},{"location":"approach/atend/","page":"atend","title":"atend","text":"To apply padding at the end of the result, set atend=true.","category":"page"},{"location":"approach/atend/","page":"atend","title":"atend","text":"the padding value is placed at the highest indices","category":"page"},{"location":"approach/atend/","page":"atend","title":"atend","text":"See also: padding,           rolling,           tiling,           running","category":"page"},{"location":"approach/safeweights/","page":"-","title":"-","text":"    safeweights(<:AbstractVector{T})::AbstractVector{T}","category":"page"},{"location":"approach/safeweights/","page":"-","title":"-","text":"ensures that the sum of the weights","category":"page"},{"location":"approach/safeweights/","page":"-","title":"-","text":"does not exceed 1\napproaches or is equal to 1","category":"page"},{"location":"approach/safeweights/","page":"-","title":"-","text":"one(T) >= safesum > prevfloat(one(T), k)","category":"page"},{"location":"approach/safeweights/","page":"-","title":"-","text":"safesum = sum(safeweights(weights))\nk <= ceil(1 + log10(wlength) + wlength^(5/16))\nwlength = length(weights)","category":"page"},{"location":"approach/safeweights/","page":"-","title":"-","text":"","category":"page"},{"location":"approach/safeweights/","page":"-","title":"-","text":"note: This normalization is not the same as calling LinearAlgebra.normalize(weights); that divides each weight by their 2-norm (the sqrt of the sum of squares). If your application expects weights to be normalized using something other the 1-norm, do the normalization yourself.","category":"page"},{"location":"approach/safeweights/","page":"-","title":"-","text":"","category":"page"},{"location":"approach/safeweights/","page":"-","title":"-","text":"See also: weighted","category":"page"},{"location":"approach/datastreams/","page":"datastreams","title":"datastreams","text":"    datastreams\r\n\r\nThere are four ways to provide data\r\nfor `rolling`, `tiling`, or `running`.","category":"page"},{"location":"approach/datastreams/","page":"datastreams","title":"datastreams","text":"data sources [usually] have a numeric eltype","category":"page"},{"location":"approach/datastreams/","page":"datastreams","title":"datastreams","text":"(a) a unary function over windows into one vector","category":"page"},{"location":"approach/datastreams/","page":"datastreams","title":"datastreams","text":"(b) a binary function over matching windows into two vectors","category":"page"},{"location":"approach/datastreams/","page":"datastreams","title":"datastreams","text":"(c) a three arg function over windows into three vectors","category":"page"},{"location":"approach/datastreams/","page":"datastreams","title":"datastreams","text":"(d) a unary function windowed over each column of a matrix","category":"page"},{"location":"approach/datastreams/","page":"datastreams","title":"datastreams","text":"each column of the matrix is treated as a simple vector\nthere is no current provision for n-ary summary functions\nthe same unary function is applied over each column\nthe same windowing is applied to each column","category":"page"},{"location":"approach/datastreams/","page":"datastreams","title":"datastreams","text":"create a window-ready function using constitutive applicands","category":"page"},{"location":"approach/datastreams/","page":"datastreams","title":"datastreams","text":"fn(v1,v2,v3,v4,v5,v6) = fnab(fna(v1, v2, v3), fnb(v3, v4, v5))","category":"page"},{"location":"approach/datastreams/","page":"datastreams","title":"datastreams","text":"See also: rolling,           tiling,           running","category":"page"},{"location":"design/approach/","page":"-","title":"-","text":"This package supports distinct approaches to appling a  moving window function over data sequences. The core design develops each approach in the same way. This simplifies development, mitigates unexpected corner cases, and improves reliability.","category":"page"},{"location":"design/approach/","page":"-","title":"-","text":"There are three approachs:  running,  tiling, and  rolling.","category":"page"},{"location":"design/approach/","page":"-","title":"-","text":"We use two keyword arguments, both are optional: padding, and  atend.","category":"page"},{"location":"design/approach/","page":"-","title":"-","text":"This allows three call states for each approach","category":"page"},{"location":"design/approach/","page":"-","title":"-","text":"<approach>(windowed_fn, window_width, data_seq)\r\n<approach>(windowed_fn, window_width, data_seq; padding=pad)\r\n<approach>(windowed_fn, window_width, data_seq; padding=pad, atend=true)","category":"page"},{"location":"design/approach/","page":"-","title":"-","text":"For every approach, there are four data configurations:","category":"page"},{"location":"design/approach/","page":"-","title":"-","text":"one vector\ntwo vectors (of equal length)\nthree vectors (of equal length)\na matrix of 2 or more columns","category":"page"},{"location":"design/approach/","page":"-","title":"-","text":"For every approach, the data sequence may be weighted.  There are three ways to introduce weights:","category":"page"},{"location":"design/approach/","page":"-","title":"-","text":"for any data configuration\nas a vector where isa(vector, StatsBase.AbstractWeights)\nfor multiple data sequences or a data matrix\nas a vector where isa(vector, Vector{<:StatsBase.AbstractWeights})\nas a matrix where isa(matrix, <:Matrix{Number})","category":"page"},{"location":"approach/tiling/","page":"tiling","title":"tiling","text":"tiling(tiling_fn, window_width, data_seq)\r\n\r\ntiling(fn, width, data; padding=nopadding)\r\ntiling(fn, width, data; padding, atend=false)","category":"page"},{"location":"approach/tiling/","page":"tiling","title":"tiling","text":"tiling a function over windowed data repeatedly applies that function to each adjacent data subsequence that the moving window provides.  The length of each subsequence is given by the width of the window.","category":"page"},{"location":"approach/tiling/","page":"tiling","title":"tiling","text":"The function is applied as if it gathers the data spanned and consumes it all at once.  The function is one that summarizes, condeneses, abstracts, characterizes, or explores contiguous subsequences shown by the moving window.","category":"page"},{"location":"approach/tiling/","page":"tiling","title":"tiling","text":"While the window is fully contained within the data, each step (one tile) increments the indices of the current window: (start:finish)  ↦  (start+width:finish+width) == (finish+1:finish+width). When advancing the window would carry the end of the window beyond the end of the data, tiling is complete.","category":"page"},{"location":"approach/tiling/","page":"tiling","title":"tiling","text":"With N data values and a window of width W (W<=N), the result from tiling will have no more than div(N, W) values. There will be rem(N, W) left over (untiled) values. Using the keyword padding, will pad the first or final (atend=true) return value when rem(N, W) != 0.","category":"page"},{"location":"approach/tiling/","page":"tiling","title":"tiling","text":"arguments","category":"page"},{"location":"approach/tiling/","page":"tiling","title":"tiling","text":"fn::Function:     summarizes, condenses windowed data\nwidth::Integer:   window breadth, counts covered elements.\ndata::Vector:     the data over which the window moves.","category":"page"},{"location":"approach/tiling/","page":"tiling","title":"tiling","text":"keywords","category":"page"},{"location":"approach/tiling/","page":"tiling","title":"tiling","text":"padding::Any=nopadding: the value place as filler.\natend::Bool=false:      where to place the padding.","category":"page"},{"location":"approach/tiling/","page":"tiling","title":"tiling","text":"See also: padding,            atend,           weighted,           datastreams","category":"page"},{"location":"approach/running/","page":"running","title":"running","text":"running(running_fn, window_width, data_seq)\r\n\r\nrunning(fn, width, data; padding=nopadding)\r\nrunning(fn, width, data; padding, atend=false)","category":"page"},{"location":"approach/running/","page":"running","title":"running","text":"running a function over windowed data repeatedly applies that function to each overlapping data subsequence that the moving window provides.  The length of each subsequence is given by the width of the window.","category":"page"},{"location":"approach/running/","page":"running","title":"running","text":"The function is applied as if it gathers the data spanned and consumes it all at once.  The function is one that summarizes, condeneses, abstracts, characterizes, or explores  subsequences shown by the moving window.","category":"page"},{"location":"approach/running/","page":"running","title":"running","text":"While the window is fully contained within the data, each step (one roll) increments the indices of the current window: (start:finish)  ↦  (start+1:finish+1). When advancing the window would carry the end of the window beyond the end of the data, running uses tapering.","category":"page"},{"location":"approach/running/","page":"running","title":"running","text":"To fill in the results where the window would be incomplete (where there is less data remaining than the window width), the function is applied to successively fewer data values. For functions that are undefined over a single value (e.g. skewness, covariance), the result of the final taper will be NaN unless you specify a padding value.","category":"page"},{"location":"approach/running/","page":"running","title":"running","text":"arguments","category":"page"},{"location":"approach/running/","page":"running","title":"running","text":"fn::Function:     summarizes, condenses windowed data\nwidth::Integer:   window breadth, counts covered elements.\ndata::Vector:     the data over which the window moves.","category":"page"},{"location":"approach/running/","page":"running","title":"running","text":"keywords","category":"page"},{"location":"approach/running/","page":"running","title":"running","text":"padding::Any=nopadding: the value place as filler.\natend::Bool=false:      where to place the padding.","category":"page"},{"location":"approach/running/","page":"running","title":"running","text":"See also: padding,            atend,           weighted,           datastreams","category":"page"},{"location":"use/padding/","page":"padding","title":"padding","text":"You may pad the result with the value of your choice","category":"page"},{"location":"use/padding/#padding-is-a-keyword-argument","page":"padding","title":"padding is a keyword argument","text":"","category":"section"},{"location":"use/padding/","page":"padding","title":"padding","text":"if you assign e.g. padding = missing, the result will be padfirst\nyou may pad using any defined value and all types except Nothing\nexample pads(missing, 0, nothing, NaN, '∅', AbstractString)","category":"page"},{"location":"use/padding/","page":"padding","title":"padding","text":"using RollingFunctions\r\n\r\n𝐷𝑎𝑡𝑎 = [1, 2, 3, 4, 5]\r\n𝐹𝑢𝑛𝑐 = sum\r\n𝑆𝑝𝑎𝑛 = 3\r\n\r\nresult = rolling(𝐹𝑢𝑛𝑐, 𝐷𝑎𝑡𝑎, 𝑆𝑝𝑎𝑛; padding = missing);\r\n#=\r\njulia> result\r\n5-element Vector{Union{Missing, Int64}}:\r\n   missing\r\n   missing\r\n  6\r\n  9\r\n 12\r\n=#\r\n \r\nresult = rolling(𝐹𝑢𝑛𝑐, 𝐷𝑎𝑡𝑎, 𝑆𝑝𝑎𝑛; padding = zero(eltype(𝐷𝑎𝑡𝑎));\r\n#=\r\njulia> result\r\n5-element Vector{Int64}:\r\n  0\r\n  0\r\n  6\r\n  9\r\n 12\r\n=#","category":"page"},{"location":"use/padding/#Give-me-the-real-values-first,-pad-to-the-end.","page":"padding","title":"Give me the real values first, pad to the end.","text":"","category":"section"},{"location":"use/padding/","page":"padding","title":"padding","text":"result = rolling(𝐹𝑢𝑛𝑐, 𝐷𝑎𝑡𝑎, 𝑆𝑝𝑎𝑛; padding = missing, atend=true);\r\n#=\r\njulia> result\r\n5-element Vector{Union{Missing,Int64}}:\r\n  6\r\n  9\r\n 12\r\n  missing\r\n  missing\r\n=#","category":"page"},{"location":"use/padding/","page":"padding","title":"padding","text":"technical aside: this is not the same as reverse(rolling(𝐹𝑢𝑛𝑐,𝐷𝑎𝑡𝑎, 𝑆𝑝𝑎𝑛; padding = zero(eltype(𝐷𝑎𝑡𝑎)).","category":"page"},{"location":"use/padding/#padding-matrices","page":"padding","title":"padding matrices","text":"","category":"section"},{"location":"use/padding/","page":"padding","title":"padding","text":"using RollingFunctions","category":"page"},{"location":"use/padding/","page":"padding","title":"padding","text":"𝐷𝑎𝑡𝑎₁ = [1, 2, 3, 4, 5] 𝐷𝑎𝑡𝑎₂ = [5, 4, 3, 2, 1] 𝐷𝑎𝑡𝑎₃ = [1, 2, 3, 2, 1]","category":"page"},{"location":"use/padding/","page":"padding","title":"padding","text":"𝑀 = hcat(𝐷𝑎𝑡𝑎₁,𝐷𝑎𝑡𝑎₂,𝐷𝑎𝑡𝑎₃) #= 5×3 Matrix{Int64}:  1  5  1  2  4  2  3  3  3  4  2  2  5  1  1 =#","category":"page"},{"location":"use/padding/","page":"padding","title":"padding","text":"𝐹𝑢𝑛𝑐 = sum 𝑆𝑝𝑎𝑛 = 3","category":"page"},{"location":"use/padding/","page":"padding","title":"padding","text":"result = rolling(𝐹𝑢𝑛𝑐, 𝑀, 𝑆𝑝𝑎𝑛; padding=missing) #= 5×3 Matrix{Union{Missing,Int64}}: missing missing missing missing missing missing   6  12  6   9   9  7  12   6  6 =#","category":"page"},{"location":"use/padding/#Give-me-the-real-values-first,-pad-to-the-end.-2","page":"padding","title":"Give me the real values first, pad to the end.","text":"","category":"section"},{"location":"use/padding/","page":"padding","title":"padding","text":"result = rolling(𝐹𝑢𝑛𝑐, 𝑀, 𝑆𝑝𝑎𝑛; padding = missing, atend=true) #= 5×3 Matrix{Union{Missing,Int64}}:   6  12  6   9   9  7  12   6  6    missing    missing   missing    missing    missing   missing =#","category":"page"},{"location":"use/padding/#multicolumn-padding","page":"padding","title":"multicolumn padding","text":"","category":"section"},{"location":"use/padding/","page":"padding","title":"padding","text":"You may pad the result with the value of your choice","category":"page"},{"location":"use/padding/#padding-is-a-keyword-argument-2","page":"padding","title":"padding is a keyword argument","text":"","category":"section"},{"location":"use/padding/","page":"padding","title":"padding","text":"if you assign e.g. padding = missing, the result will be padfirst\nyou may pad using any defined value and all types except Nothing\nexample pads(missing, 0, nothing, NaN, '∅', AbstractString)","category":"page"},{"location":"use/padding/","page":"padding","title":"padding","text":"using RollingFunctions\r\n\r\n𝐷𝑎𝑡𝑎₁ = [1, 2, 3, 4, 5]\r\n𝐷𝑎𝑡𝑎₂ = [5, 4, 3, 2, 1]\r\n\r\n𝐹𝑢𝑛𝑐 = cov\r\n𝑆𝑝𝑎𝑛 = 3\r\n\r\nresult = rolling(𝐹𝑢𝑛𝑐, 𝐷𝑎𝑡𝑎₁, 𝐷𝑎𝑡𝑎₂, 𝑆𝑝𝑎𝑛; padding = zero(eltype(𝑀)))\r\n\r\n#=\r\njulia> result\r\n5 element Vector {Float64}:\r\n  0.0\r\n  0.0\r\n -1.0\r\n -1.0\r\n -1.0\r\n=#","category":"page"},{"location":"use/padding/#Give-me-the-real-values-first,-pad-to-the-end.-3","page":"padding","title":"Give me the real values first, pad to the end.","text":"","category":"section"},{"location":"use/padding/","page":"padding","title":"padding","text":"result = rolling(𝐹𝑢𝑛𝑐, 𝐷𝑎𝑡𝑎₁, 𝐷𝑎𝑡𝑎₂, 𝑆𝑝𝑎𝑛; padding = missing, atend=true)\r\n\r\n#=\r\n5 element Vector {Float64}:\r\n -1.0\r\n -1.0\r\n -1.0\r\n  missing\r\n  missing\r\n=#","category":"page"},{"location":"tech/windowsorts/#the-kinds-of-window-extent","page":"-","title":"the kinds of window extent","text":"","category":"section"},{"location":"tech/windowsorts/","page":"-","title":"-","text":"quantity extent given by utilizes\nspan index separation positions\nduration elapsed time timestamps\ncount tally of occurances events\nsession content obtained activities\n  ","category":"page"},{"location":"tech/windowsorts/#the-kinds-of-positional-skip","page":"-","title":"the kinds of positional skip","text":"","category":"section"},{"location":"tech/windowsorts/","page":"-","title":"-","text":"fixed\nexpanding\ndynamic","category":"page"},{"location":"tech/windowsorts/","page":"-","title":"-","text":"https://materialize.com/docs/transform-data/patterns/temporal-filters/","category":"page"},{"location":"tech/windowsorts/","page":"-","title":"-","text":"period [step] –  before a new window begins","category":"page"},{"location":"tech/windowsorts/","page":"-","title":"-","text":"(number of indices / amount of time / count of occurances / activity)","category":"page"},{"location":"tech/windowsorts/","page":"-","title":"-","text":"Tumbling windows are what we call windows when their duration equals their period (the amount of time before a new window begins). This creates fixed-size, contiguous, non-overlapping time intervals where each record belongs to exactly one interval.","category":"page"},{"location":"tech/windowsorts/","page":"-","title":"-","text":"Hopping windows are windows whose duration is an integer multiple of their period. This creates fixed-size windows that may overlap, with records belonging to multiple windows.","category":"page"},{"location":"tech/windowsorts/","page":"-","title":"-","text":"Sliding windows are windows whose period approaches the limit of 0. This creates fixed-size windows that appear to slide continuously forward in time. Records may belong to more than one interval.","category":"page"},{"location":"tech/windowsorts/","page":"-","title":"-","text":"count-based, delta-based, time-based, punctuation-based","category":"page"},{"location":"tech/windowsorts/","page":"-","title":"-","text":"rolling weighted expanding windows","category":"page"},{"location":"tech/windowsorts/","page":"-","title":"-","text":"event-time, processing-time","category":"page"},{"location":"tech/windowsorts/#the-modes-of-window-advancement","page":"-","title":"the modes of window advancement","text":"","category":"section"},{"location":"tech/windowsorts/","page":"-","title":"-","text":"A window that covers <first, last> advances to <last, last+(last-first)>.","category":"page"},{"location":"tech/windowsorts/","page":"-","title":"-","text":"A window moves by advancing its start by jump and covering its extent","category":"page"},{"location":"tech/windowsorts/","page":"-","title":"-","text":"Each window has a fixed or dynamic or expanding extent\nEach window has a fixed or dynamic or expanding jump","category":"page"},{"location":"tech/windowsorts/","page":"-","title":"-","text":"name increment overlap gap\nslide fixed extent-1 none\ntile fixed none none\ntumble fixed no gapless\noverlap fixed no gapless\nhop fixed extent-jump jump-extent\nsession dynamic no no","category":"page"},{"location":"tech/windowsorts/","page":"-","title":"-","text":"Every windows has a width (span). The width  There are two distinct sorts of windows that are taken over data: rolling and tiled.  ","category":"page"},{"location":"tech/windowsorts/","page":"-","title":"-","text":"Rolling windows advance step-by-step over the data\neach step advances the indices widthned by 1\nTiled windows advance in larger strides over the data\neach stride advances the indices widthned by a fixed multistep","category":"page"},{"location":"tech/windowsorts/","page":"-","title":"-","text":"With tiled windows, the tiling (the width that describes the indices covered by each tile) and the multistep increment are the same in most uses. An example of this is summarizing a week of daily data with a tiling of 7 and then moving to the following week with a multistep of 7.","category":"page"},{"location":"tech/windowsorts/","page":"-","title":"-","text":"To use a multistep increment that is less than the tiling is permitted. As an example, summarize two weeks of daily data with a tiling of 14 and skip over one week with a multistep of 7 to allow you to analyze two week intervals one week at a time.","category":"page"},{"location":"tech/windowsorts/","page":"-","title":"-","text":"To use a multistep increment that exceeds the tiling is permitted. As an example, summarize a week of daily data with a tiling of 7 and skip over two weeks with a multistep of 14 to allow you to analyze odd weeks and use that analysis along with the even weeks to constrain a model.","category":"page"},{"location":"thanks/","page":"Thanks","title":"Thanks","text":"There have been many who contributed.","category":"page"},{"location":"thanks/","page":"Thanks","title":"Thanks","text":"These people have done more, some without trying.","category":"page"},{"location":"thanks/","page":"Thanks","title":"Thanks","text":"thanks \nEliot Saba @staticfloat\nBogumił Kamiński @bkamins\nMiguel Raz Guzmán Macedo @miguelraz\nTyler Beason @tbeason\nKevin Patel @kevindirect","category":"page"},{"location":"design/dispatch/#**Simplifying-Dispatch**","page":"-","title":"Simplifying Dispatch","text":"","category":"section"},{"location":"design/dispatch/","page":"-","title":"-","text":"","category":"page"},{"location":"design/dispatch/#unweighted-and-weighted","page":"-","title":"unweighted and weighted","text":"","category":"section"},{"location":"design/dispatch/","page":"-","title":"-","text":"<approach>(windowed_fn, window_width, data_seq;\r\n                    padding=pad, atend=true)\r\n\r\n<approach>(windowed_fn, window_width, data_seq, weighting;\r\n                    padding=pad, atend=true)","category":"page"},{"location":"design/dispatch/","page":"-","title":"-","text":"","category":"page"},{"location":"design/dispatch/#unpadded,-padded-at-start,-padded-at-end","page":"-","title":"unpadded, padded at start, padded at end","text":"","category":"section"},{"location":"design/dispatch/#*unweighted*","page":"-","title":"unweighted","text":"","category":"section"},{"location":"design/dispatch/","page":"-","title":"-","text":"<approach>(windowed_fn, window_width, data_seq)\r\n\r\n<approach>(windowed_fn, window_width, data_seq,\r\n                    padding)\r\n\r\n<approach>(windowed_fn, window_width, data_seq,\r\n                    padding, atend)","category":"page"},{"location":"design/dispatch/#*weighted*","page":"-","title":"weighted","text":"","category":"section"},{"location":"design/dispatch/","page":"-","title":"-","text":"<approach>(windowed_fn, window_width, data_seq, weighting)\r\n\r\n<approach>(windowed_fn, window_width, data_seq, weighting,\r\n                    padding)\r\n\r\n<approach>(windowed_fn, window_width, data_seq, weighting,\r\n                    padding, atend)","category":"page"},{"location":"#Apply-functions-over-windows-that-advance-through-data.","page":"Home","title":"Apply functions over windows that advance through data.","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"\nRollingFunctions.jl © 2017-2023 by Jeffrey Sarnoff\n","category":"page"},{"location":"#in-three-different-ways","page":"Home","title":"in three different ways","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"rolling\ntiling\nrunning","category":"page"},{"location":"#optionally-specifying","page":"Home","title":"optionally specifying","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"weights\npadding\npad placement","category":"page"},{"location":"#with-these-data-sequences","page":"Home","title":"with these data sequences","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"datastreams","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Capabilities","page":"Home","title":"Capabilities","text":"","category":"section"},{"location":"#apply-{-rolling,-tiling,-running-}","page":"Home","title":"≺ apply ≻ { rolling, tiling, running }","text":"","category":"section"},{"location":"#keywords-(optional)","page":"Home","title":"keywords (optional)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"padding = nopadding (omit padding) [or use this value]\natend = false (pad the start) [true, pad the end]","category":"page"},{"location":"#data-sequences","page":"Home","title":"data sequences","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"as provided\n≺ apply ≻(winfn, winwidth, seq)\nwith weights\n≺ apply ≻(winfn, winwidth, seq, weights)","category":"page"},{"location":"#data-matrix","page":"Home","title":"data matrix","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"as provided\n≺ apply ≻(winfn, winwidth, data_matrix)\nwith shared weights\n≺ apply ≻(winfn, winwidth, data_matrix, weights)\nwith unique weights\n≺ apply ≻(winfn, winwidth, datamatrix, weightmatrix)\n(each data matrix column is independent – use unary functions)","category":"page"},{"location":"","page":"Home","title":"Home","text":"  signature\nmultisequence  ≺ apply ≻(fn, width, rest...)\n  \nunweighted  rest\n  (seq1, seq2)\n  (seq1, ..,  seqN)\n  \nshared weights  rest\n  (seq1, seq2, weights)\n  (seq1, .., seqN, weights)\n  \nunique weights  rest\n  (seq1, seq2, [weights1, weights2])\n  (seq1, .., seqN, [weights1, .., weightsN])\n  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"(the maximum number of sequences, Nseq = 3)","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
